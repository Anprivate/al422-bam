module al422_bam_first_stage(
	input wire in_clk, in_nrst,
	input wire [7:0] in_data,
	output reg [2:0] rgb_out1, rgb_out2,
	output reg led_clk,
	output reg al422_re
);

	parameter PIXEL_COUNT;
	
	// in_data_buffer
	reg [7:0] in_data_buffer;
	reg data_in_data_buffer_valid;
	always @(posedge in_clk or negedge in_nrst)
		if (~in_nrst)
		begin
			data_in_data_buffer_valid <= 1'b0;
			in_data_buffer <= 8'h00;
		end
		else
		begin
			data_in_data_buffer_valid <= 1'b1;
			in_data_buffer <= in_data;
		end

	reg [1:0] phase_cntr;
	wire [2:0] phase_reg;
	
	assign phase_reg[0] = (phase_cntr == 2'h0);
	assign phase_reg[1] = (phase_cntr == 2'h1);
	assign phase_reg[2] = (phase_cntr == 2'h2);
	
	wire last_phase;
	assign last_phase = phase_reg[2];
	
	always @(posedge in_clk or negedge in_nrst)
		if (~in_nrst)
			phase_cntr <= 0;
		else
			if (data_in_data_buffer_valid)
				if (last_phase)
					phase_cntr <= 0;
				else
					phase_cntr <= phase_cntr + 1;

	reg first_cycle_finished;
	always @(posedge in_clk or negedge in_nrst)
		if (~in_nrst)
			first_cycle_finished <= 1'b0;
		else
			if (last_phase)
				first_cycle_finished <= 1'b1;

	// pixel counter
	parameter PIXEL_COUNTER_WIDTH = $clog2(PIXEL_COUNT);
	reg [PIXEL_COUNTER_WIDTH:0] pixel_counter;

	wire last_pixel;
	assign last_pixel = (pixel_counter == (PIXEL_COUNT + 2));
	
	always @(posedge in_clk or negedge in_nrst)
		if (~in_nrst)
			pixel_counter <= 0;
		else
			if (data_in_data_buffer_valid & last_phase)
				if (last_pixel)
					pixel_counter <= 0;
				else
					pixel_counter <= pixel_counter + 1;

	reg data_in_panel_row_ready;
	always @(posedge in_clk or negedge in_nrst)
		if (~in_nrst)
			data_in_panel_row_ready <= 1'b0;
		else
			if (data_in_data_buffer_valid & last_phase & last_pixel)
				data_in_panel_row_ready <= 1'b1;
	
	parameter BIT_COUNTER_WIDTH = 3;
	reg [BIT_COUNTER_WIDTH - 1:0] bit_counter;

	reg [2:0] rgb_tmp;
	always @(posedge in_clk or negedge in_nrst)
		if (~in_nrst)
			rgb_tmp <= 0;
		else
			if (data_in_data_buffer_valid)
				rgb_tmp[phase_cntr] <= in_data_buffer[bit_counter];
	
	wire tmp_rgb_strobe;
	assign tmp_rgb_strobe = phase_reg[0];
	reg out_data_valid;
	always @(posedge in_clk or negedge in_nrst)
		if (~in_nrst)
		begin
			rgb_out1 <= 0;
			rgb_out2 <= 0;
			out_data_valid <= 1'b0;
		end
		else
			if (data_in_data_buffer_valid & tmp_rgb_strobe & first_cycle_finished)
			begin
				rgb_out1 <= rgb_tmp;
				out_data_valid <= 1'b1;
			end
			else
				out_data_valid <= 1'b0;

	always @(posedge in_clk or negedge in_nrst)
		if (~in_nrst)
			led_clk <= 1'b0;
		else
			led_clk <= out_data_valid;
				
	always @(posedge in_clk or negedge in_nrst)
		if (~in_nrst)
			bit_counter <= 0;
		else
			bit_counter <= 0;
	
	always @(posedge in_clk or negedge in_nrst)
		if (~in_nrst)
			al422_re <= 1'b0;
		else
			if ((pixel_counter == (`PIXEL_COUNT - 1)) & phase_reg[1])
				al422_re <= 1'b1;

endmodule
